# Steps to run at the beginning of workflow jobs that can be triggered
# by workflow_run

name: 'Multi trigger setup'
inputs:
  status-context:
    required: true
runs:
  using: 'composite'
  steps:
    # If triggered on workflow_run or workflow_dispatch, the status
    # won't be automatically added to any PRs associated with this
    # change, so we need to set the status manually. This sets the
    # status to pending, but more importantly it adds a URL to the PR
    # check linking to this workflow job.
    - name: Report initial status after trigger
      if: ${{ 
          github.event_name == 'workflow_run'
          || github.event_name == 'workflow_dispatch'
        }}
      uses: actions/github-script@v7
      env:
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
        SHA: ${{ github.event.workflow_run.head_sha || github.sha }}
        STATE: pending
        CONTEXT: ${{ inputs.status-context }}
        TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: process.env.OWNER,
            repo: process.env.REPO,
            sha: process.env.SHA,
            state: process.env.STATE,
            context: process.env.CONTEXT,
            target_url: process.env.TARGET_URL,
          });

    # If this was triggered by a completed workflow run, we want to make
    # sure that workflow actually succeeded. If it didn't, we should skip
    # the remainder of the tests.
    - name: Fail on triggering workflow failure
      if: ${{
          github.event_name == 'workflow_run'
          && github.event.workflow_run.conclusion != 'success'
        }}
      shell: bash
      run: |
        echo "Skipping tests because the triggering workflow did not succeed"
        exit 1
    
    # If triggered by a workflow_run, check to see whether this workflow
    # actually changed. It it did, it's possible to get false positive
    # signals because the workflow runs from its definition on the default
    # branch, not the branch where it was updated. See note below in the
    # run section for additional context.
    - name: Fail on change to workflow file on workflow_run trigger
      if: ${{ github.event_name == 'workflow_run' }}
      shell: bash
      run: |
        default_branch="${{ github.event.repository.default_branch }}"
        git fetch origin "$default_branch"
        workflow_file=$(echo ${{ github.workflow_ref }} | cut -d'/' -f3- | cut -d'@' -f1)
        if [[ -n $(git diff origin/"$default_branch" -- "$workflow_file") ]]; then
          cat <<'EOF'
          This job was triggered by a workflow_run event, which uses the
          workflow file from the default branch of the repo. However,
          changes were detected to this workflow file within the branch
          being checked. Therefore, any signals that would be produced by
          this workflow may not include the changes on the new branch. 
          Failing this job to prevent false positive outcomes.

          In order to pass this job, an owner of this repo must manually
          invoke it from the github actions menu using the branch being
          checked. That uses the workflow_dispatch trigger, which will
          pick up the modified version of this workflow file.
        EOF
          exit 1;
        fi
